= Python V4 Publish/Subscribe Tutorial for Realtime Apps

== API keys

TODO: change 'publishKey' => 'publish_key'

TODO: 'subscribeKey' => 'subscribe_key'

== Messages overview
the same as in Java

== Messages design consideration
the same as in Java

== Channel design patterns
the same as in Java

== Data stream samples
The procedure to publish and subscribe is really quite simple:

* Include PubNub library
* `PubNubTornado()` - instantiate a PubNub instance
* `subscribe()` - subscribe to a specific channel
* `publish()` - send message on a specific channel
* `unsubscribe()` - additively unsubscribe to a specific channel

==== Include the PubNub library
Add PubNub to your project using one of the procedures defined under How to Get It.

==== Initialize the API
If this PubNubTornado instance will only be subscribing, you only need to pass the `subscribe_key`
to initialize the instance. If this instance will be subscribing and publishing, you must
also include the `publish_key` parameter.

[source,python]
----
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub_tornado import PubNubTornado

pnconfig = PNConfiguration()

pnconfig.subscribe_key = 'my_subscribe_key'
pnconfig.publish_key = 'my_publish_key'
pnconfig.secret_key = 'my_secret_key'

pubnub = PubNubTornado(pnconfig)
----

==== Publishing and subscribing to a channel

The channel the messages will be published over is called `my_channel`. For this example,
we will use the same instance to both publish and subscribe. To do this, we'll publish
a message to the channel, but only after we're sure we've first successfully subscribed to the channel.


The `publish()` and `subscribe()` methods are pretty simple to use. For both `publish()`
and `subscribe()`, the channel attribute defines the channel in use.

When using the `subscribe()` method, the `callback` is where received messages are called-back to:

[source,python]
----
pubnub.subscribe().channels("my_channel").execute()
----

NOTE: During your application's lifecycle, you can call `subscribe()` repeatedly to additively
subscribe to additional channels.

For `publish()`, the message attribute contains the data you are sending.

[source,python]
----
envelope = yield pubnub.publish()\
    .channel("my_channel")\
    .message(['hello', 'there'])\
    .should_store(True)\
    .use_post(True)\
    .future()
----

The above code demonstrates how to subscribe, and how to publish. But what if your use-case requires that client instance not only subscribes and publishes, but also that its guaranteed to start publishing only AFTER it's successfully subscribed? -- In other words, you want to guarantee it receives all of its own publishes?

The Java V4 client SDK, like many of the PubNub SDKs, is asynchronous -- publish() can, and most likely will, fire before the previously executed subscribe() call completes. The result is, for a single-client instance, you would never receive (via subscribing) the message you just published, because the subscribe operation did not complete before the message was published.

To get around this common case, we can take advantage of the optional connect callback in the subscribe method.

[source,python]
.Publish after subscribe connect using SubscribeCallback
----
from pubnub.callbacks import SubscribeCallback
from pubnub.enums import PNStatusCategory

from tornado import gen

@gen.coroutine
def main():
    def publish_callback(*args):
        pass

    class MyListener(SubscribeCallback):
        def status(self, pubnub, status):
            if status.category == PNStatusCategory.PNConnectedCategory:
                pubnub.ioloop.add_future(
                    pubnub.publish().channel("awesomeChannel").message({'fieldA': 'awesome', 'fieldB': 10}).future(),
                    publish_callback
                )

        def message(self, pubnub, message):
            pass

        def presence(self, pubnub, presence):
            pass

    my_listener = MyListener()

    pubnub.add_listener(my_listener)

    pubnub.subscribe().channels("awesomeChannel").execute()
    yield gen.sleep(10)
----

[source,python]
.Publish after subscribe connect, read message and unsubscribe using SubscribeListener
----
from pubnub.pubnub_tornado import SubscribeListener

from tornado import gen

@gen.coroutine
def main():
    my_listener = SubscribeListener()
    pubnub.add_listener(my_listener)

    pubnub.subscribe().channels("awesomeChannel").execute()
    yield my_listener.wait_for_connect()
    print("connected")

    yield pubnub.publish().channel("awesomeChannel").message({'fieldA': 'awesome', 'fieldB': 10}).future()
    result = yield my_listener.wait_for_message_on("awesomeChannel")
    print(result.message)

    pubnub.unsubscribe().channels("awesomeChannel").execute()
    yield my_listener.wait_for_disconnect()

    print("unsubscribed")
----

By following this pattern on a client that both subscribes and publishes when you want to be sure to subscribe to your own publishes, you'll never miss receiving a message.

==== Unsubscribing from a channel
While you are subscribed to a channel, you will continue to receive messages published to that channel. To stop receiving messages on a given channel, you must Unsubscribe() from the channel.

[source,python]
----
pubnub.unsubscribe().channels("my_channel").execute()
----

Like subscribe(), unsubscribe() can be called multiple times to successively remove different channels from the active subscription list.
