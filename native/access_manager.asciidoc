= Python Security with Access Control, AES & TLS/SSL encryption for Realtime Apps

TODO: rename 'secretKey' => 'secret_key'
TODO: rename 'cipherKey' => 'cipher_key'
TODO: rename 'setSecure' => 'ssl' < in python it's not a method but a field


[source,python]
.To initialize with the secret key:
----
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub import PubNub

pnconfig = PNConfiguration()

pnconfig.publish_key = "my_publish_key"
pnconfig.subscribe_key = "my_subscribe_key"
pnconfig.secret_key = "my_secret_key"
pnconfig.ssl = True

pubnub = PubNub(pnconfig)
----


[source,python]
.To initialize with the auth key:
----
from pubnub.pnconfiguration import PNConfiguration

pnconfig = PNConfiguration()
pnconfig.auth_key = "my_authkey"
----

[source,python]
.PubNub Access Manager - Administrative-side Configuration:
----
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub import PubNub

pnconfig = PNConfiguration()

pnconfig.subscribe_key = "my_subscribe_key"
pnconfig.secret_key = "my_secret_key"

pubnub = PubNub(pnconfig)
----

[source,python]
.Pam operations level #2
----
envelope = pubnub.revoke().sync()
----

[source,python]
.Pam operations level #3
----
envelope = pubnub.grant()\
    .read(True)\
    .write(False)\
    .channel('public_chat')\
    .ttl(60)\
    .sync()
----

[source,python]
.Pam operations level #4
----
envelope = pubnub.grant()\
    .read(True)\
    .write(True)\
    .channel('public_chat')\
    .auth_keys('authenticateduser')\
    .ttl(60)\
    .sync()
----



[source,python]
.Handling permissions denied error
----
from pubnub.callbacks import SubscribeCallback
from pubnub.enums import PNStatusCategory

class MyListener(SubscribeCallback):
    def presence(self, pubnub, presence):
        pass

    def message(self, pubnub, message):
        pass

    def status(self, pubnub, status):
        if status.is_error():
            if status.category == PNStatusCategory.PNAccessDeniedCategory:
                print("handle permissions here")

my_listener = MyListener()
pubnub.add_listener(my_listener)

pubnub.subscribe().channels("private_chat").execute()
----


[source,python]
.Grant access to manage CG
----
envelope = pubnub.grant()\
    .manage(True)\
    .channel_groups(['cg1', 'cg2', 'cg3'])\
    .auth_keys(['key1', 'key2', 'key3'])\
    .ttl(60)\
    .sync()
----

[source,python]
.Revoke access to CG
----
envelope = pubnub.revoke()\
    .channel_groups(['cg1', 'cg2', 'cg3'])\
    .auth_keys(['key1', 'key2', 'key3'])\
    .sync()
----

[source,python]
.Message layer encryption AES256
----
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub import PubNub

pnconfig = PNConfiguration()

pnconfig.publish_key = "my_pub_key"
pnconfig.subscribe_key = "my_sub_key"
pnconfig.cipher_key = "my_cipher_key"

pubnub = PubNub(pnconfig)
----

[source,python]
.TLS/SSL
----
from pubnub.pnconfiguration import PNConfiguration
from pubnub.pubnub import PubNub

pnconfig = PNConfiguration()

pnconfig.publish_key = "my_pub_key"
pnconfig.subscribe_key = "my_sub_key"
pnconfig.ssl = True

pubnub = PubNub(pnconfig)
----